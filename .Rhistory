str(TR_)
#' The full data set contains tree ring shape data for Abies_277_h400 sampled from Tateyama, central Japan.
#' Its disk image and shape files can be download from  https://www.sanchikanri.com/treering/Abies_277_h400.zip
#' It's intended to demonstrate the structure and use of `TreeRingShape` class objects within the package.
#'
#' @name TR_
#' @export
#' @examples
#' # Access basic information about the TreeRingShape object
#' slotNames(TR_)
#' str(TR_)
"TR_"
TR. <- new('classTreeRingShape')
TR.
slotNames(TR.)
str(TR.)
methods::setClass("classTreeRingShape",
slots = c(P_filename = "character",
P_id.tag = "character",
P_ring.tag = "character",
P = "data.frame",
P00 = "numeric",
n_id = "numeric",
YR_P = "numeric",
L_filename = "character",
L_ring.tag = "character",
L = "list",
L_ = "data.frame",
YR_L = "numeric",
ln = "numeric",
L2_filename = "character",
L2 = "list",
n_YR = "numeric")
)
# TR ####
# TR ####
#' A sample object of class TreeRingShape
#'
# TR ####
#' A sample object of class TreeRingShape
#'
#' The data set contains tree ring shape data for Abies_277_h400 sampled from Tateyama, central Japan.
#' Its disk image and shape files can be download from  https://www.sanchikanri.com/treering/Abies_277_h400.zip
# TR ####
#' A sample object of class TreeRingShape
#'
#' The data set contains tree ring shape data for Abies_277_h400 sampled from Tateyama, central Japan.
#' Its disk image and shape files can be download from  https://www.sanchikanri.com/treering/Abies_277_h400.zip
#' It's intended to demonstrate the structure and use of `TreeRingShape` class objects within the package.
#'
# TR ####
#' A sample object of class TreeRingShape
#'
#' The data set contains tree ring shape data for Abies_277_h400 sampled from Tateyama, central Japan.
#' Its disk image and shape files can be download from  https://www.sanchikanri.com/treering/Abies_277_h400.zip
#' It's intended to demonstrate the structure and use of `TreeRingShape` class objects within the package.
#'
#' @name TR
#' @export
# Access basic information about the TreeRingShape object
slotNames(TR)
str(TR)
# Plot the tree ring shape data
Lplot(TR@L)
#' It's intended to demonstrate the structure and use of `TreeRingShape` class objects within the package.
#'
#' @name TR
#' @export
#' @examples
#' # Access basic information about the TreeRingShape object
#' slotNames(TR)
#' str(TR)
#' # Plot the tree ring shape data
#' Lplot(TR@L)
"TR"
#' The full data set contains tree ring shape data for Abies_277_h400 sampled from Tateyama, central Japan.
#' Its disk image and shape files can be download from  https://www.sanchikanri.com/treering/Abies_277_h400.zip
#' It's intended to demonstrate the structure and use of `TreeRingShape` class objects within the package.
#'
#' @name TR_
#' @export
#' @examples
#' # Access basic information about the TreeRingShape object
#' slotNames(TR_)
#' str(TR_)
"TR_"
#' P_id.tag='id',
#' P_ring.tag='ring',
#' L_ring.tag='ring')
#'
#'  TR_
#'  slotNames(TR_)
#'  str(TR_)
#'
#'
#'
new_classTreeRingShape <- function(P_filename, L_filename, L2_filename,
P_id.tag = "id", P_ring.tag = "ring", L_ring.tag = "ring") {
# generate new TR object from classTreeRingShape
TR <- new("classTreeRingShape")  # treering_cls #str(TR)
# tree ring points
TR@P_filename <- P_filename  #'ex : points277_h400'
TR@P_id.tag <- "id"
TR@P_ring.tag <- "ring"
#TR <- TreeRingsPoints(TR)
# representative tree ring lines
TR@L_filename <- L_filename  # 'ex : line277_h400'
TR@L_ring.tag <- L_ring.tag
#TR <- TreeRingsLines(TR)
# representative + interpolated tree ring lines
TR@L2_filename <- L2_filename  #
#TR <- TreeRingsInterpolation(TR)
return(TR)
}
# flow chart ####
library(DiagrammeR)
mermaid("
graph TB
B(new_classTreeRingShape)
B --> C(TreeRingPoints  )
C-->D(TreeRingLines)
D--> E(TreeRingInterpolation)
E-->G(TR)
H(TreeRingShape)-->G
G-->I(TreeRingArea)
I-->K(TreeRingIndex)
")####
text(0,0,"test")
mermaid("
classDiagram
Class01 <|-- AveryLongClass : Cool
<<interface>> Class01
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --> C2 : Where am i?
Class09 --* C3
Class09 --|> Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 <--> C2: Cool label
# class Class10 {
#   <<service>>
#   int id
#   size()
}
")
# flow chart ####
library(DiagrammeR)
mermaid("
graph TB
B(new_classTreeRingShape)
B --> C(TreeRingPoints  )
C-->D(TreeRingLines)
D--> E(TreeRingInterpolation)
E-->G(TR)
H(TreeRingShape)-->G
G-->I(TreeRingArea)
I-->K(TreeRingIndex)
")
# Create a sequence diagram
DiagrammeR("
sequenceDiagram;
customer->>ticket seller: ask for a ticket;
ticket seller->>database: seats;
alt tickets available
database->>ticket seller: ok;
ticket seller->>customer: confirm;
customer->>ticket seller: ok;
ticket seller->>database: book a seat;
ticket seller->>printer: print a ticket;
else sold out
database->>ticket seller: none left;
ticket seller->>customer: sorry;
end
")
# grVitz ####
grViz("digraph{
graph[rankdir = LR]
node[shape = rectangle, style = filled]
node[fillcolor = Coral, margin = 0.2]
A[label = 'Figure 1: Map']
B[label = 'Figure 2: Metrics']
node[fillcolor = Cyan, margin = 0.2]
C[label = 'Figures.Rmd']
node[fillcolor = Violet, margin = 0.2]
D[label = 'Analysis_1.R']
E[label = 'Analysis_2.R']
subgraph cluster_0 {
graph[shape = rectangle]
style = rounded
bgcolor = Gold
label = 'Data Source 1'
node[shape = rectangle, fillcolor = LemonChiffon, margin = 0.25]
F[label = 'my_dataframe_1.csv']
G[label = 'my_dataframe_2.csv']
}
subgraph cluster_1 {
graph[shape = rectangle]
style = rounded
bgcolor = Gold
label = 'Data Source 2'
node[shape = rectangle, fillcolor = LemonChiffon, margin = 0.25]
H[label = 'my_dataframe_3.csv']
I[label = 'my_dataframe_4.csv']
}
edge[color = black, arrowhead = vee, arrowsize = 1.25]
C -> {A B}
D -> C
E -> C
F -> D
G -> D
H -> E
I -> E
A -> I
}")
mermaid("
graph TB
B(new_classTreeRingShape)
B --> C(TreeRingPoints  )
C-->D(TreeRingLines)
D--> E(TreeRingInterpolation)
E-->G(TR)
H(TreeRingShape)-->G
G-->I(TreeRingArea)
I-->K(TreeRingIndex)
")
TR
load("~/8T/Dropbox/00D/00/ring/TreeRingShape/data/TR_.RData")
TR_
#　devtools::document　####
devtools::document()
#' Its disk image and shape files can be download from  https://www.sanchikanri.com/treering/Abies_277_h400.zip
#' It's intended to demonstrate the structure and use of `TreeRingShape` class objects within the package.
#'
#' @name TR_
#' @export
#' @examples
#' # Access basic information about the TreeRingShape object
#' slotNames(TR_)
#' str(TR_)
# Dummy object for documentation
TR_ <- new("TreeRingShape", shapeFilePath="path/to/shapefile", columnNames=c("Year", "Width"))
#' Its disk image and shape files can be download from  https://www.sanchikanri.com/treering/Abies_277_h400.zip
#' It's intended to demonstrate the structure and use of `TreeRingShape` class objects within the package.
#'
#' @name TR_
#' @export
#' @examples
#' # Access basic information about the TreeRingShape object
#' slotNames(TR_)
#' str(TR_)
# Dummy object for documentation
TR_ <- c()
#　devtools::document　####
devtools::document()
# check ####
devtools::check()
# check ####
devtools::check()
#　devtools::document　####
devtools::document()
library(TreeRingShape)
#　devtools::document　####
devtools::document()
#' P_id.tag='id',
#' P_ring.tag='ring',
#' L_ring.tag='ring')
#'
#'  TR_
#'  slotNames(TR_)
#'  str(TR_)
#'
#'
#'
new_classTreeRingShape <- function(P_filename, L_filename, L2_filename,
P_id.tag = "id", P_ring.tag = "ring", L_ring.tag = "ring") {
# generate new TR object from classTreeRingShape
TR <- new("classTreeRingShape")  # treering_cls #str(TR)
# tree ring points
TR@P_filename <- P_filename  #'ex : points277_h400'
TR@P_id.tag <- "id"
TR@P_ring.tag <- "ring"
#TR <- TreeRingsPoints(TR)
# representative tree ring lines
TR@L_filename <- L_filename  # 'ex : line277_h400'
TR@L_ring.tag <- L_ring.tag
#TR <- TreeRingsLines(TR)
# representative + interpolated tree ring lines
TR@L2_filename <- L2_filename  #
#TR <- TreeRingsInterpolation(TR)
return(TR)
}
#　devtools::document　####
devtools::document()
# check ####
devtools::check()
#' P_id.tag='id',
#' P_ring.tag='ring',
#' L_ring.tag='ring')
#'
#'  TR_
#'  slotNames(TR_)
#'  str(TR_)
#'
#'
#'
new_classTreeRingShape <- function(P_filename, L_filename, L2_filename,
P_id.tag = "id", P_ring.tag = "ring", L_ring.tag = "ring") {
# generate new TR object from classTreeRingShape
TR <- new("classTreeRingShape")  # treering_cls #str(TR)
# tree ring points
TR@P_filename <- P_filename  #'ex : points277_h400'
TR@P_id.tag <- "id"
TR@P_ring.tag <- "ring"
#TR <- TreeRingsPoints(TR)
# representative tree ring lines
TR@L_filename <- L_filename  # 'ex : line277_h400'
TR@L_ring.tag <- L_ring.tag
#TR <- TreeRingsLines(TR)
# representative + interpolated tree ring lines
TR@L2_filename <- L2_filename  #
#TR <- TreeRingsInterpolation(TR)
return(TR)
}
#' The full data set contains tree ring shape data for Abies_277_h400 sampled from Tateyama, central Japan.
#' Its disk image and shape files can be download from  https://www.sanchikanri.com/treering/Abies_277_h400.zip
#' It's intended to demonstrate the structure and use of `TreeRingShape` class objects within the package.
#'
#' @name TR_
#' @export
#' @examples
#' # Access basic information about the TreeRingShape object
#' slotNames(TR_)
#' str(TR_)
TR_<-new_classTreeRingShape(
P_filename='Abies_277_h400_TreeRing_Points.shp',
L_filename='Abies_277_h400_TreeRing_Representative.shp',
L2_filename='Abies_277_h400_TreeRing.shp',
P_id.tag='id',
P_ring.tag='ring',
L_ring.tag='ring')
TR_
new_classTreeRingShape
#　devtools::document　####
devtools::document()
library(devtools)
library(testthat)
library(TreeRingShape)
# check ####
devtools::check()
help(package = "TreeRingShape")
devtools::install_github("ishidamgm/TreeRingShape",vignettes = TRUE)
library(TreeRingShape)
devtools::build_vignettes()
devtools::build_rmd("vignettes/TreeRingShape.Rmd")
library(TreeRingShape)
help(package = "TreeRingShape")
# Authors@R: c(
#   person("Megumi", "ISHIDA", email = "ishidam@sanchikanri.com",
#          role = c("aut", "cph", "cre"),
#          comment = c(ORCID = "0000-0003-0978-5388")))
#devtools::install()
devtools::install(build_vignettes = TRUE)
browseVignettes("TreeRingShape")
## R CMD check --as-cran . ####
devtools::build_vignettes()
browseVignettes("TreeRingShape")
# build and install package with vignettes !!! ####
devtools::build(binary = TRUE,vignettes = TRUE,manual = TRUE)
devtools::install_github("ishidamgm/TreeRingShape", build_vignettes = TRUE,force=T)
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
library(TreeRingShape)
help(package = "TreeRingShape")
#　devtools::document　####
devtools::document()
# build and install package with vignettes !!! ####
devtools::build(binary = TRUE,vignettes = TRUE,manual = TRUE)
#devtools::install_github("ishidamgm/TreeRingShape", build_vignettes = TRUE,force=T)
devtools::install(build_vignettes = TRUE)
# build and install package with vignettes !!! ####
devtools::build(binary = TRUE,vignettes = TRUE,manual = TRUE)
#devtools::install_github("ishidamgm/TreeRingShape", build_vignettes = TRUE,force=T)
devtools::install(build_vignettes = TRUE)
# check ####
devtools::check()
# check ####
devtools::check()
library(TreeRingShape)
.dir <- system.file("shp",package = "TreeRingShape")
.file <- "Abies_277_h400_TreeRing_Representative.shp"
filename <- paste(.dir,.file,sep="/")
sf.L<-sf::st_read(filename)
plot(sf.L)
Lplot(ReadShapefile_TreeRings(filename))
library(TreeRingShape)
help(package = "TreeRingShape")
browseVignettes("TreeRingShape")
.dir <- system.file("shp",package = "TreeRingShape")
.file <- "Abies_277_h400_TreeRing_Representative.shp"
filename <- paste(.dir,.file,sep="/")
sf.L<-sf::st_read(filename)
plot(sf.L)
.file <- "Abies_277_h400_TreeRing_Points.shp"
filename <- paste(.dir,.file,sep="/")
sf.P<-sf::st_read(filename)
sf.P
sf.P@CRS
z<-sf.P
z
str(z)
z$geometry
str(z$geometry)
attributes(z)
library(sf)
# crs2na.R
dir()
library(sf)
st_read("./inst/shp/Abies_277_h400_TreeRing_Representative.shp")
l<-st_read("./inst/shp/Abies_277_h400_TreeRing_Representative.shp")
plot(l)
CRS(l)
l
devtools::check()       #  errors ✔ | 0 warnings ✔ | 0 notes ✔
#　devtools::document　####
devtools::document()
devtools::build_manual()   ## pdf manual ####
# build and install package with vignettes !!! ####
devtools::build(binary = TRUE,vignettes = TRUE,manual = TRUE)
#devtools::install_github("ishidamgm/TreeRingShape", build_vignettes = TRUE,force=T)
devtools::install(build_vignettes = TRUE)
library(TreeRingShape)
help(package = "TreeRingShape")
library(TreeRingShape)
TR@L2
TR <- TreeRingsInterpolation(TR)
TR@L2  ###  entered
ya <- plot_year_RingArea(TR@L2, 2018)$Year_TreeRingArea
# Figure of relationships year and tree ring area
plot(ya,type='b')
tri. <- TreeRingIndex(ya)
lines(tri.$spline,col='red',lw=2)
# Figure of relationships year and tree ring index
plot(tri.$idx,type='b')
abline(h=1,col='red')
#' @param nrow  par(mfrow=c(nrow,ncol))
#' @param ncol  par(mfrow=c(nrow,ncol))
#' @param ask  logical; if TRUE, the user is asked before each plot
#' @param ... other parameters to be passed through to plotting functions.
#'
#' @export
#'
#' @examples
#' Lplot2(TR@L,i.ring=1:9, nrow=1,ncol=1,type='b')
#' Lplot2(TR@L,type='b')
Lplot2 <- function(L, i.ring = 1:length(L), nrow = 3, ncol = 3, ask = "FALSE", ...) {
on.exit(par(oldpar))
par(mfrow = c(nrow, ncol))
for (i in i.ring) plot(L[[i]], main = paste(i, ":", names(L)[i], "yr"), ...)
}
Lplot2(TR@L,i.ring=1:9, nrow=1,ncol=1,type='b')
Lplot2(TR@L,type='b')
#' @param nrow  par(mfrow=c(nrow,ncol))
#' @param ncol  par(mfrow=c(nrow,ncol))
#' @param ask  logical; if TRUE, the user is asked before each plot
#' @param ... other parameters to be passed through to plotting functions.
#'
#' @export
#'
#' @examples
#' Lplot2(TR@L,i.ring=1:9, nrow=1,ncol=1,type='b')
#' Lplot2(TR@L,type='b')
Lplot2 <- function(L, i.ring = 1:length(L), nrow = 3, ncol = 3, ask = "FALSE", ...) {
on.exit(par(oldpar))
par(mfrow = c(nrow, ncol))
for (i in i.ring) plot(L[[i]], main = paste(i, ":", names(L)[i], "yr"), ...)
}
Lplot2(TR@L,type='b')
par(no.readonly = TRUE)
oldpar
oldpar
oldpar <- par(no.readonly = TRUE)
oldpar
#' @param nrow  par(mfrow=c(nrow,ncol))
#' @param ncol  par(mfrow=c(nrow,ncol))
#' @param ask  logical; if TRUE, the user is asked before each plot
#' @param ... other parameters to be passed through to plotting functions.
#'
#' @export
#'
#' @examples
#' Lplot2(TR@L,i.ring=1:9, nrow=1,ncol=1,type='b')
#' Lplot2(TR@L,type='b')
Lplot2 <- function(L, i.ring = 1:length(L), nrow = 3, ncol = 3, ask = "FALSE", ...) {
on.exit(par(oldpar))
par(mfrow = c(nrow, ncol))
for (i in i.ring) plot(L[[i]], main = paste(i, ":", names(L)[i], "yr"), ...)
}
Lplot2(TR@L,type='b')
Lplot2(TR@L,i.ring=1:9, nrow=1,ncol=1,type='b')
Lplot2(TR@L,type='b')
TR@L
TR@L
Lrn(TR@L,168)  # 168 is the formation year (from outermost) of the tree ring
# check ####
devtools::check()
# check ####
devtools::check()
